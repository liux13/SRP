
layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "isbox"
  top: "x"
  top: "y"
  top: "angle"
  include {
    phase: TRAIN      
  }
  python_param {
    module: "python_layers"
    layer: "BoxInputLayer"
    param_str:"dict(num=128, phase=\'TRAIN\')"
  }
}
layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "isbox"
  top: "x"
  top: "y"
  top: "angle"
  include {
    phase: TEST      
  }
  python_param {
    module: "python_layers"
    layer: "BoxInputLayer"
    param_str:"dict(num=128, phase=\'TEST\')"
  }
}

#######
# Start of existing network here
# (Excludinng its data  layers of course)
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult:1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "drop_p2"
  type: "Dropout"
  bottom: "pool2"
  top: "pool2"
  dropout_param {
    dropout_ratio: 0.5
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "drop_ip1"
  type: "Dropout"
  bottom: "ip1"
  top: "ip1"
  dropout_param {
    dropout_ratio: 0.5
  }
  include {
    phase: TRAIN
  }
}

# End of pre-existing network here
# (Excluding the last loss layer etc. of cours)
# Also exclude the finala IP layer, unless you want to replace 'top_isbox' by it. 
####################





layer {
  name: "top_isbox"
  type: "InnerProduct"
  bottom: "ip1"       # <----  Rename this to the top of the pre-existing CNN
  top: "top_isbox"     
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "top_angle_discrete_18out"
  type: "InnerProduct"
  bottom: "ip1"        # <----  Rename this to the top of the pre-existing CNN
  top: "top_angle"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 18
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "top_x_c"
  type: "Convolution"
  bottom: "conv1"   
  top: "top_x"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    kernel_size: 60
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "top_y_c2"
  type: "Convolution"
  bottom: "conv1"   # <----  Rename this to the top of the pre-existing CNN
  top: "top_y_c"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    kernel_size: 60
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "top_y_c1"
  type: "InnerProduct"
  bottom: "top_y_c"   # <----  Rename this to the top of the pre-existing CNN
  top: "top_y"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}




layer {
  name: "isbox_loss"
  type: "SoftmaxWithLoss"
  bottom: "top_isbox"
  bottom: "isbox"
  top: "isbox_loss"
  loss_weight: 1
}

layer {
    name: "angle_filter"
    type: "Python"
    bottom: "top_angle"
    bottom: "isbox"
    top: "top_angle_filter"
    python_param {
       module: "python_layers"
       layer: "MaskoutLayer"
       param_str:"dict(cval=np.array([1]+[0]*17))"
    }
}

layer {
    name: "x_filter"
    type: "Python"
    bottom: "top_x"
    bottom: "isbox"
    top: "top_x_filter"
    python_param {
       module: "python_layers"
       layer: "MaskoutLayer"
       param_str:"dict(cval=np.array([0]*32+[1]+[0]*31))"
    }
}

layer {
    name: "y_filter"
    type: "Python"
    bottom: "top_y"
    bottom: "isbox"
    top: "top_y_filter"
    python_param {
       module: "python_layers"
       layer: "MaskoutLayer"
       param_str:"dict(cval=np.array([0]*32+[1]+[0]*31))"
    }
}

layer {
  name: "angle_loss"
  type: "SoftmaxWithLoss"
  bottom: "top_angle_filter"
  bottom: "angle"
  top: "angle_loss"
  loss_weight: 1
}


layer {
  name: "y_loss"
  type: "SoftmaxWithLoss"
  bottom: "top_y_filter"
  bottom: "y"
  top: "y_loss"
  loss_weight: 1
}

layer {
  name: "x_loss"
  type: "SoftmaxWithLoss"
  bottom: "top_x_filter"
  bottom: "x"
  top: "x_loss"
  loss_weight: 1
}


layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "top_isbox"
  bottom: "isbox"
  top: "acc"
}
